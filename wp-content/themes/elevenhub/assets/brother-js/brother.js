var loading = "<div id='loader' class='animated rubberBand infinite'></div>";

/*
*	Class name: UserMedia
*	Class arguments: userID [ INT ] (optional)
*	Class purpose: This class is used to control all the media events and methods in the HUB project.
*/
var UserMedia = function( userID = "" ) {
	var classHolder = this;

	/*
	*	Function name: BuildMediaView
	*	Function arguments: loadProfilePictures [ BOOLEAN ], markupToBuild [ STRING ]
	*	Function purpose:
	*	This function generates popup view for the current user.
	*	If the loadProfilePictures variable is true it will load the media view for profile pictures.
	* 	Also if the markupToBuild variable is not empty its content will be created inside the popup.
	*/
	this.BuildMediaView = function( loadProfilePictures = false, markupToBuild = "" ) {
		view_ = "\
		<div id='media-popup-container' class='popup-container animated fadeIn'>\
			<div id='media-popup-fields' class='popup-inner-container'>\
				<button id='close-button' class='close-button fa fa-close'></button>\
				"+ markupToBuild.toString().replace( /(?:\r\n|\r|\n)/g, "" ) +"\
			</div>\
		</div>\
		";

		jQuery( "body" ).append( view_ );
		jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ classHolder.destroyMediaPopup(); } });
		jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ classHolder.destroyMediaPopup(); });

		//Load images if needed
		if ( loadProfilePictures == true ) {
			build = "\
				<div id='profile-images-holder'>\
					<form action='"+ admin_post_url +"' method='POST' enctype='multipart/form-data' id='profile-media-uploader'>\
						<div id='avatar' class='avatar'></div>\
						<input type='file' id='avatar-picker' class='file-picker' name='avatar-picker'>\
						<div id='banner' class='banner'></div>\
						<input type='file' id='banner-picker' class='file-picker' name='banner-picker'>\
						<button id='save-user-pictures-button' class='green-bold-button'>Save</button>\
						<input type='hidden' name='action' value='upload_profile_media'>\
					</form>\
				</div>\
			";

			jQuery( "#media-popup-fields" ).append( build );

			jQuery( "#media-popup-container #media-popup-fields #save-user-pictures-button" ).on("click", function(){ jQuery( "#profile-images-holder" ).append( loading ); jQuery( "#profile-media-uploader" ).submit(); });

			this.getUserAvatarURL( "", function( response ){ jQuery( "#media-popup-fields #profile-images-holder #avatar" ).attr( "style", "background-image: url("+ response +")" ) } );
			this.getUserBannerURL( "", function( response ){ jQuery( "#media-popup-fields #profile-images-holder #banner" ).attr( "style", "background-image: url("+ response +")" ) } );
		}
	}

	/*
	*	Function name: destroyMediaPopup
	*	Function arguments: NONE
	*	Function purpose:
	*	This function will destroy the popup view generated by BuildMediaView function.
	*/
	this.destroyMediaPopup = function() { jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); }

	/*
	*	Function name: getUserAvatarURL
	*	Function arguments: userID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to retrieve and handle the user avatar url via custom functions provided by the onSuccess argument.
	*/
	this.getUserAvatarURL = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_avatar_url", arguments : userID }, function( response ){ onSuccess( response ); } );
	}

	/*
	*	Function name: getUserBannerURL
	*	Function arguments: userID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to retrieve and handle the user banner url via custom functions provided by the onSuccess argument.
	*/
	this.getUserBannerURL = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_banner_url", arguments : userID }, function( response ){ onSuccess( response ); } );
	}

	/*
	*	Function name: buildAttachmentController
	*	Function arguments: attachmentID [ INT ] (required) (the ID of the file in the HUB DB), attachmentTYPE [ STRING ] (required) (the TYPE of the file)
	*	Function purpose: This function is used to build the Front-end controls attached with the specific media attachment.
	*/
	this.buildAttachmentController = function( attachmentID, attachmentTYPE ) {
		buttons_ = "\
			<button id='get-link' class='media-button'>Get link</button>\
			<button id='delete' class='media-button red'>Delete</button>\
		";

		if (
			attachmentTYPE.split( "/" )[0] == "image" ||
			attachmentTYPE.split( "/" )[0] == "video"
		) { buttons_ = "<button id='open' class='media-button'>Open</button>"+ buttons_; }

		view_ = "\
		<div id='media-popup-container' class='popup-container animated fadeIn'>\
			<div id='media-popup-fields' class='popup-inner-container'>\
				<button id='close-button' class='close-button fa fa-close'></button>\
				<div id='media-controls'>"+ buttons_ +"</div>\
			</div>\
		</div>\
		";

		jQuery( "body" ).append( view_ );
		jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ classHolder.destroyMediaPopup(); } });
		jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ classHolder.destroyMediaPopup(); });

		// Set media controls
		if ( jQuery( "#media-popup-container #media-controls #open" ).length ) {
			jQuery( "#media-popup-container #media-controls #open" ).on("click", function(){
				view_ = "<div id='media-preview' class='preview-popup animated fadeIn'>"+ loading +"</div>";
				jQuery( "body" ).append( view_ );

				generateAJAX({
						functionName : "get_attachment_url",
						arguments : attachmentID.split( "-" )[1]
					}, function ( response ) {
						response = JSON.parse( response );
						if ( response != "false" ) {
							jQuery( "#media-preview #loader" ).remove();

							view_ = "";
							switch ( attachmentTYPE.split( "/" )[0] ) {
								case "image":
									view_ = "<img src='"+ response +"' id='"+ attachmentID +"' class='picture-preview animated flipInX'/>";
									break;
								case "video":
									view_ = "<video id='"+ attachmentID +"' class='video-preview animated flipInX' controls loop autoplay><source src='"+ response +"' type='"+ attachmentTYPE +"'></video>";
									break;

								default:

							}


							jQuery( "#media-preview" ).append( view_ );

							// Add close event
							jQuery( "#media-preview" ).on("click", function(){
								jQuery( "#media-preview" ).removeClass( "fadeIn" ).addClass( "fadeOut" );
								setTimeout(function(){ jQuery( "#media-preview" ).remove(); }, 750);
							});
						}
					}
				);
			});
		}

		if ( jQuery( "#media-popup-container #media-controls #get-link" ).length ) {
			jQuery( "#media-popup-container #media-controls #get-link" ).on("click", function(){
				view_ = "<div id='attachment-url-holder' class='inline-popup-holder animated bounceInDown'>"+ loading +"</div>";
				jQuery( "#media-popup-container #media-controls" ).append( view_ );

				generateAJAX({
						functionName : "get_attachment_url",
						arguments : attachmentID.split( "-" )[1]
					}, function ( response ) {
						response = JSON.parse( response );
						if ( response != "false" ) {
							jQuery( "#media-popup-container #media-controls #attachment-url-holder" ).html( "<input type='text' placeholder='Attachment link...' id='copy-text-holder' value='"+ response +"'>" );
							jQuery( "#media-popup-container #media-controls #attachment-url-holder #copy-text-holder" ).on("blur", function(){
								jQuery( "#media-popup-container #media-controls #attachment-url-holder" ).removeClass( "bounceInDown" ).addClass( "bounceOutUp" );
								setTimeout(function(){ jQuery( "#media-popup-container #media-controls #attachment-url-holder" ).remove(); }, 750);
							});
						}
					}
				);
			});
		}

		if ( jQuery( "#media-popup-container #media-controls #delete" ).length ) {
			jQuery( "#media-popup-container #media-controls #delete" ).on("click", function(){
				jQuery( "#media-popup-container #media-controls" ).append( loading );

				if ( selectedElements.length <= 0 ) {
					classHolder.deleteAttachment( attachmentID.split( "-" )[1], function( response ){
						jQuery( "#media-popup-container #media-controls #loader" ).remove();

						if ( response == "true" ) {
							classHolder.destroyMediaPopup();
							jQuery( "#"+ attachmentID ).addClass( "fadeOutUp" );
							setTimeout( function(){ jQuery( "#"+ attachmentID ).remove(); }, 750 );
						} else { console.log( response ); }
					} );
				} else {
					for ( var i = 0; i < selectedElements.length; i++ ) {
						classHolder.deleteAttachment( selectedElements[i].split( '-' )[1], function( response ){
							if ( response == "true" ) {
								window.location.reload( true );
							} else { console.console.log( response ); }
						} );
					}
				}
			});
		}
	}

	/*
	*	Function name: daleteAttachment
	*	Function arguments: attachmentID [ INT ] (required) (the ID of the file in the HUB DB), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to delete file & its meta from the HUB DB and HDD (Hard Drive Disk).
	*/
	this.deleteAttachment = function( attachmentID, onSuccess ) {
		generateAJAX({
				functionName : "delete_user_media",
				arguments : {
					user_id: companyID,
					attachment_id: attachmentID
				}
			},
			function ( response ) {
				onSuccess( response );
			}
		);
	}

	/*
	*	Function name: getUserMedia
	*	Function arguments: userID [ INT ] (required) (the ID of the user which media should be revealed), offset [ INT ] (optional) (the number of elements which should be skipped on the request), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to get media files associated with the userID.
	*/
	this.getUserMedia = function( userID, offset = 0, onSuccess ) {
		generateAJAX({
				functionName : "get_user_media",
				arguments : {
					user_id: companyID,
					is_ajax: true,
					offset: offset
				}
			}, function( response ) {
				onSuccess( response );
			}
		);
	}
}

/*
*	Class name: UserRelations
*	Class arguments: vUserID [ INT ] (required) (the user of the visited / wanted user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
*	Class purpose: This class is used to control & handle all the relations methods between the different users in the HUB.
*/
var UserRelations = function( vUserID, userID = "" ) {

	/*
	*	Function name: followOrUnfollowRelation
	*	Function arguments: vUserID [ INT ] (required) (the VisitedUserID), recalculateFollower [ BOOL ] (optional) (tells the function if you need an array of the followers to be returned), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpose: This function is used to generate user relation from TYPE: Follow or Unfollow.
	*/
	this.followOrUnfollowRelation = function( vUserID, recalculateFollowers = false, onSuccess, userID = "" ) {
		generateAJAX( { functionName : "follow_or_unfollow_relation", arguments : { v_user_id: vUserID, user_id: userID, recalculate_followers: recalculateFollowers } }, function ( response ) { onSuccess( response ); } );
	}

	/*
	*	Function name: getUserRelationStatistics
	*	Function arguments: userID [ INT ] (optional) (the ID of the current logged user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpse: This function is used to return JSON objects for the user with userID with his/hers followers & follows || company employees if the $is_company argument is set to true.
	*/
	this.getUserRelations = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_relations", arguments : userID }, function ( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); } );
	}

	/*
	*	Function name: getUserFollowers
	*	Function arguments: userID [ INT ] (optional) (the ID of the current logged user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpose: This function is used to return JSON objects for the user with userID with his/hers followers.
	*/
	this.getUserFollowers = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_followers", arguments : userID }, function ( response ) { onSuccess( JSON.parse( response ) ); } );
	}

	/*
	*	Function name: getUserFollowers
	*	Function arguments: userID [ INT ] (optional) (the ID of the current logged user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpose: This function is used to return JSON objects for the user with userID with his/hers follows.
	*/
	this.getUserFollows = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_follows", arguments : userID }, function ( response ) { onSuccess( JSON.parse( response ) ); } );
	}

	/*
	*	Function name: getUserFollowers
	*	Function arguments: userID [ INT ] (optional) (the ID of the current logged user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpose: This function is used to return JSON objects for the user with userID with company employees.
	*/
	this.getUserEmployees = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_employees", arguments : userID }, function ( response ) { onSuccess( JSON.parse( response ) ); } );
	}

	/*
	*	Function name: removeCompanyEmployee
	*	Function arguments: userID [ INT ] (required), companyID [ INT ] (required), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to fire company from a company.
	*/
	this.removeCompanyEmployee = function( userID, companyID, onSuccess ) {
		generateAJAX( { functionName : "hire_or_fire_relation", arguments : { user_id: userID, company_id: companyID } }, function( response ) { onSuccess( JSON.parse( response ) ); } );
	}

	/*
	*	Function name: sendCompanyInviteRequest
	*	Function arguments: userID [ INT ] (required), companyID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to send invitation request from the specified companyID to the specific userID.
	*/
	this.sendCompanyInviteRequest = function( userID, companyID = "", onSuccess ) {
		generateAJAX( { functionName : "send_invite_request", arguments : { user_id: userID, company_id: companyID } }, function ( response ) { onSuccess( JSON.parse( response ) ); } );
	}

	/*
	*	Function name: buildCompanyJoinDialog
	*	Function arguments: NONE
	*	Function purpose: This function is used to build the dialog view as a real HTML markup.
	*/
	this.buildCompanyJoinDialog = function() {
		view_ = "\
		<div id='media-popup-container' class='popup-container animated fadeIn'>\
			<div id='media-popup-fields' class='popup-inner-container'>\
				<button id='close-button' class='close-button fa fa-close'></button>\
				<label for='cv-holder'>Link to your CV</label>\
				<input type='text' id='cv-holder'/>\
				<label for='portfolio-holder'>Link your portfolio website (if you had one)</label>\
				<input type='text' id='portfolio-holder'/>\
				<button id='submit-button' class='green-bold-button'>Send request</button>\
			</div>\
		</div>\
		";

		userMediaController = new UserMedia;

		jQuery( "body" ).append( view_ );
		jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ userMediaController.destroyMediaPopup(); } });
		jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ userMediaController.destroyMediaPopup(); });

		jQuery( "#media-popup-container #media-popup-fields #submit-button" ).on("click", function(){
			jQuery( "#media-popup-container #media-popup-fields" ).append( loading );

			cv_ = jQuery( "#media-popup-container #media-popup-fields #cv-holder" ).val().trim();
			portfolio_ = jQuery( "#media-popup-container #media-popup-fields #portfolio-holder" ).val().trim();

			generateAJAX({
					functionName : "send_join_request",
					arguments : {
						company_id: vUserID,
						user_id: userID,
						user_cv_link: cv_,
						user_portfolio_link: portfolio_
					}
				}, function ( response ) {
					response = JSON.parse( response );
					if ( response == "requested" ) {
						window.location.reload( true );
					} else {
						jQuery( "#media-popup-fields #loader" ).remove();
						alert_box = "<div id='alert-box' class='animated bounceInDown'>"+ response +"<button id='close-popup-button' onclick='removeAlertBox();'>Close</button></div>";
						jQuery( "#media-popup-container" ).append( alert_box );
					}
				}
			);
		});
	}

	/*
	*	Function name: buildCompanyLeaveDialog
	*	Function arguments: NONE
	*	Function purpose: This function is used to construct a dialog for company leave.
	*/
	this.buildCompanyLeaveDialog = function() {
		view_ = "\
		<div id='media-popup-container' class='popup-container animated fadeIn'>\
			<div id='media-popup-fields' class='popup-inner-container'>\
				<button id='close-button' class='close-button fa fa-close'></button>\
				<label for='password-holder'>Enter your password for confirmation</label>\
				<input type='password' id='password-holder'/>\
				<button id='submit-button' class='green-bold-button'>Leave</button>\
			</div>\
		</div>\
		";

		userMediaController = new UserMedia;

		jQuery( "body" ).append( view_ );
		jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ userMediaController.destroyMediaPopup(); } });
		jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ userMediaController.destroyMediaPopup(); });

		jQuery( "#media-popup-container #media-popup-fields #submit-button" ).on("click", function(){
			jQuery( "#media-popup-container #media-popup-fields" ).append( loading );
			password = jQuery( "#media-popup-container #media-popup-fields #password-holder" ).val().trim();

			generateAJAX({
					functionName : "leave_company",
					arguments : {
						password : password,
						user_id : "",
						company_id : vUserID
					}
				}, function( response ) {
					response = JSON.parse( response );
					jQuery( "#media-popup-container #media-popup-fields #loader" ).remove();

					if ( response == "left" ) {

					} else {
						alert_box = "<div id='alert-box' class='animated bounceInDown'>"+ response +"<button id='close-popup-button' onclick='removeAlertBox();'>Close</button></div>";
						jQuery( "#media-popup-container" ).append( alert_box );
					}
				}
			);
		});

		jQuery( "#media-popup-container #media-popup-fields #password-holder" ).on("keydown", function(e){
			if ( e.keyCode == 13 ) {
				jQuery( "#media-popup-container #media-popup-fields" ).append( loading );
				password = jQuery( "#media-popup-container #media-popup-fields #password-holder" ).val().trim();

				generateAJAX({
						functionName : "leave_company",
						arguments : {
							password : password,
							user_id : "",
							company_id : vUserID
						}
					}, function( response ) {
						response = JSON.parse( response );
						jQuery( "#media-popup-container #media-popup-fields #loader" ).remove();

						if ( response == "left" ) { window.location.reload( true ); }
						else {
							alert_box = "<div id='alert-box' class='animated bounceInDown'>"+ response +"<button id='close-popup-button' onclick='removeAlertBox();'>Close</button></div>";
							jQuery( "#media-popup-container" ).append( alert_box );
						}
					}
				);
			}
		});
	}

	/*
	*	Function name: acceptUserRequest
	*	Function arguments: requestID [ INT ] (required), requestType [ STRING ] (required) the types can be: JOIN to company && INVITE by company;
	*	Function purpose: This function is used to accept users Company Join Request (CJR).
	*/
	this.acceptUserRequest = function( requestID, requestType ) {
		generateAJAX({
				functionName : "update_join_request",
				arguments : {
					request_id: requestID,
					response: "accept",
					request_type: requestType
				}
			}, function ( response ) {
				response = JSON.parse( response );
				if ( response == "" ) { window.location.reload( true ); }
				else { console.log( response ); }
			}
		);
	}

	/*
	*	Function name: declineUserRequest
	*	Function arguments: requestID [ INT ] (required), requestType [ STRING ] (required) the types can be: JOIN to company && INVITE by company;
	*	Function purpose: This function is used to decline users Company Join Request (CJR).
	*/
	this.declineUserRequest = function( requestID ) {
		generateAJAX({
				functionName : "update_join_request",
				arguments : {
					request_id: requestID,
					response: "decline",
					request_type: requestType
				}
			}, function ( response ) {
				response = JSON.parse( response );
				if ( response == "" ) { window.location.reload( true ); }
				else { console.log( response ); }
			}
		);
	}
}

/*
*	Class name: UserNotifications
*	Class arguments: userID [ INT ] (optional) (the ID of the desired user notifications)
*	Class purpose: This class is used to control & handle all the methods for the user notifications.
*/
var UserNotifications = function( userID = "" ) {

	/*
	*	Function name: getUserNotifications
	*	Function arguments: userID [ INT ] (optional) (the ID of the desired user notifications), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*	Function purpose: This function returns and JSON object of the all last 100 notifications ordered by Notifications_ID
	*/
	this.getUserNotifications = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_notifications", arguments : userID }, function( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); } );
	}

	/*
	*	Function name: getUserUnseenNotifications
	*	Function arguments: userID [ INT ] (optional) (the ID of the desired user notifications), listedNotificationsIDs [ INT_ARRAY ] (optional) (used to tell the back-end algorithm which notifications to skip), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function returns only the latest unseen notifications of the desired user.
	*/
	this.getUserUnseenNotifications = function( userID = "", listedNotificationsIDs = [], onSuccess ) {
		generateAJAX( { functionName : "get_user_unseen_notifications", arguments : { user_id: userID, listed_notifications: listedNotificationsIDs } }, function ( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); } )
	}

}

/*
*	Class name: UserMeta
*	Class arguments: userID [ INT ] (optional) (the ID of the desired user)
*	Class purpose: Used to controll all methods bind with the meta information of the user.
*/
var UserMeta = function( userID = "" ) {

	/*
	*	Function name: updateUserMeta
	*	Function arguments: userID [ INT ] (optional) (the ID of the desired user), formID [ STRING ] (the selector to the form which contains First / Last name, Password & Biography), passwordPromptID [ STRING ] (the selector to the popup form which prompts the user to insert their current password), onSuccess [ FUNCTION ] (required) (tells the method what to do after the response)
	*	Function purpose: This function is used to generate AJAX request to the back-end Brother.PHP update_user_meta( $data ) and update the user meta information from there.
	*/
	this.updateUserMeta = function( userID = "", formID, passwordPromptID, onSuccess ) {
		first_name = jQuery( formID ).find( "#first-name" ).val().trim();
		last_name = jQuery( formID ).find( "#last-name" ).val().trim();
		new_password = jQuery( formID ).find( "#user-password" ).val().trim();
		biography = jQuery( formID ).find( "#biography" ).val().trim();

		notify_over_email = jQuery( formID ).find( "#notify_over_email option:selected" ).val().trim();

		current_password = jQuery( passwordPromptID ).find( "#current-password" ).val().trim();

		generateAJAX({
				functionName : "update_user_meta",
				arguments : {
					user_id: userID,
					first_name: first_name,
					last_name: last_name,
					new_password: new_password,
					biography: biography,
					notify_over_email: notify_over_email,
					current_password: current_password
				}
			}, function( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: updateCompanyMeta
	*	Function argumnets: userID [ INT ] (optional), formID [ STRING_SELECTOR ] (required), passwordPromptID [ STRING_SELECTOR ] (required), onSuccess [ FUNCTION ] (required) (tells the method what to do after the response)
	*	Function purpose: This function is used to send new company meta information to the back-end of the HUB project.
	*/
	this.updateCompanyMeta = function( userID = "", formID, passwordPromptID, onSuccess ) {
		first_name = jQuery( formID ).find( "#first-name" ).val().trim();
		last_name = jQuery( formID ).find( "#last-name" ).val().trim();
		short_name = jQuery( formID ).find( "#short-name" ).val().trim();
		new_password = jQuery( formID ).find( "#user-password" ).val().trim();

		company_type = jQuery( formID ).find( "#company-type option:selected" ).val().trim();
		company_writing_permissions = jQuery( formID ).find( "#company-writing-permissions option:selected" ).val().trim();
		company_publications_communication_permissions = jQuery( formID ).find( "#company-publications-communication-permissions option:selected" ).val().trim();
		company_media_uploads_permissions = jQuery( formID ).find( "#company-media-uploads-permissions option:selected" ).val().trim();

		notify_over_email = jQuery( formID ).find( "#notify_over_email option:selected" ).val().trim();

		current_password = jQuery( passwordPromptID ).find( "#current-password" ).val().trim();

		generateAJAX({
				functionName : "update_company_meta",
				arguments : {
					user_id: userID,
					first_name: first_name,
					last_name: last_name,
					short_name: short_name,
					new_password: new_password,
					company_type: company_type,
					company_writing_permissions: company_writing_permissions,
					company_publications_communication_permissions: company_publications_communication_permissions,
					company_media_uploads_permissions: company_media_uploads_permissions,
					notify_over_email: notify_over_email,
					current_password: current_password
				}
			}, function( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}
}

/*
*	Class name: UserStory
*	Class arguments: userID [ INT ] (optional) (the ID of the desired user)
*	Class purpose: This class is used as a controller for all Company & User stories over the HUB.
*/
var UserStory = function( userID = "" ) {
	var classHolder = this;

	/*
	*	Function name: buildComposer
	*	Function argumnets: NONE
	*	Function purpose: This function builds & opens the story composer.
	*/
	this.buildComposer = function() {
		var composer_controls = "";
		if ( !isMobile() ) {
			composer_controls = "\
			<div id='story-controls'>\
				<button id='publish-controller' class='blue-bold-button'>Publish</button>\
				<span class='bull-separator'>&bull;</span>\
				<button id='drafts-controller' class='skeleton-bold-button'>Drafts</button>\
				<span class='bull-separator'>&bull;</span>\
				<button id='close-controller' class='skeleton-bold-button'>Close</button>\
			</div>\
			";
		} else {
			composer_controls = "\
			<div id='story-controls'>\
				<button id='publish-controller' class='blue-bold-button'><span class='fa fa-pencil'></span></button>\
				<span class='bull-separator'>&bull;</span>\
				<button id='drafts-controller' class='skeleton-bold-button'><span class='fa fa-archive'></span></button>\
				<span class='bull-separator'>&bull;</span>\
				<button id='close-controller' class='skeleton-bold-button'><span class='fa fa-close'></span></button>\
			</div>\
			";
		}

		floating_controls = "\
		<div id='story-floating-controls'>\
			<button id='add-media-controller' class='hvr-underline-from-center'>Add media</button>\
			<span class='bull-separator'>&bull;</span>\
			<button id='add-mention-controller' class='hvr-underline-from-center'>Mention</button>\
		</div>\
		";

		var random_editor_id = "editor-"+ Math.floor( ( Math.random() * 1000 ) + 1 );

		composer = "\
		<div id='story-composer' class='animated slideInUp' post-id='0'>\
			"+ composer_controls +"\
			<div id='story-featured-image' class='story-banner' attachment-id><button id='featured-image-controller' class='fa fa-pencil'></button></div>\
			<h1 id='story-header' class='story-header' contenteditable='true' placeholder='Story title'></h1>\
			<div id='story-content' class='story-content "+ random_editor_id +"' contenteditable='true'></div>\
			"+ floating_controls +"\
			<script type='text/javascript'>var canSave = true;</script>\
		</div>\
		";

		jQuery( "body" ).append( composer );

		//Initialize Tiny-MCE
		tinymce.init({
    		selector: "."+ random_editor_id,
			theme: "inlite",
			inline: true,
			browser_spellcheck: true,
			selection_toolbar: 'bold italic quicklink h2 blockquote',
			insert_toolbar: '',
			file_picker_types: 'image',
		  	plugins: 'wordcount',
			setup:
			function(editor) {
				editor.on('change', function(e) {
					if ( tinyMCE.activeEditor !== undefined ) { classHolder.convertLinksToImageVideo( tinyMCE.activeEditor.getContent({ format: "text" }) ); }
				});
			}
  		});
		tinymce.EditorManager.execCommand('mceAddEditor',true, "#story-content");

		var autoSave = setTimeout(function(){}, 0);

		//Composer controlls
		jQuery( "#story-header" ).on("keydown", function(){ window.clearTimeout( autoSave ); });
		jQuery( "#story-header" ).on("keyup", function(){ autoSave = classHolder.autoSave(); });

		jQuery( "#story-content" ).on("keydown", function(){ window.clearTimeout( autoSave ); });
		jQuery( "#story-content" ).on("keyup", function(){ autoSave = classHolder.autoSave(); });

		jQuery( "#featured-image-controller" ).on("click", function(){
			build = "\
			<div id='media-popup-container' class='popup-container animated fadeIn'>\
				<div id='media-popup-fields' class='popup-inner-container'>\
					<button id='close-button' class='close-button fa fa-close'></button>\
					<div id='media-list' class='mt-2em mb-2em mh-auto text-align-center line-height-zero'>"+ loading +"</div>\
				</div>\
			</div>\
			";

			jQuery( "body" ).append( build );
			jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); } });
			jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); });

			generateAJAX({
					functionName : "get_user_media",
					arguments : {
						user_id: companyID,
						is_ajax: true
					}
				}, function( response ) {
					jQuery( "#media-popup-container #media-popup-fields #media-list #loader" ).remove();

					medias = JSON.parse( JSON.parse( response ) );
					for ( count = 0; count < medias.length; count++ ) {
						if ( medias[ count ].TYPE.split( "/" )[0] == "image" ) {
							view_ = "<div id='attachment-"+ medias[ count ].ID +"' class='inline-media animated fadeIn' attachment_src='"+ medias[ count ].URL +"' attachment_type='"+ medias[ count ].TYPE +"' style='background-image: url("+ medias[ count ].URL +");'><div>";
							jQuery( "#media-popup-container #media-popup-fields #media-list" ).append( view_ );
						}
					}

					// Set controls
					jQuery( "#media-popup-container #media-popup-fields #media-list .inline-media" ).each(function(){
						jQuery( this ).on("click", function(){
							jQuery( "#story-featured-image" ).css( "background-image", "url("+ jQuery( this ).attr( "attachment_src" ) +")" );
							jQuery( "#story-featured-image" ).attr( "attachment-id", jQuery( this ).attr( "id" ) );
							window.clearTimeout( autoSave );
							autoSave = classHolder.autoSave();
						});
					});

					var mediaOffset = 20;

					// Load more view
					view_ = "<div id='load-more-controller' class='inline-media animated fadeIn'><span>More</span></div>";
					jQuery( "#media-popup-container #media-popup-fields #media-list" ).append( view_ );
					jQuery( "#media-popup-container #media-popup-fields #media-list #load-more-controller" ).on("click", function(){
						generateAJAX({
								functionName : "get_user_media",
								arguments : {
									user_id: companyID,
									is_ajax: true,
									offset: mediaOffset
								}
							}, function( response ) {
								response = JSON.parse( JSON.parse( response ) );

								if ( response != "You don't have any media." ) {
									mediaOffset += 20;
									for ( count = 0; count < response.length; count++ ) {
										if ( response[ count ].TYPE.split( "/" )[0] == "image" ) {
											view_ = "<div id='attachment-"+ response[ count ].ID +"' class='inline-media new animated fadeIn' attachment_src='"+ response[ count ].URL +"' attachment_type='"+ response[ count ].TYPE +"' style='background-image: url("+ response[ count ].URL +");'><div>";
											jQuery( view_ ).insertBefore( "#media-popup-container #media-popup-fields #media-list #load-more-controller" );
										}
									}

									// Set controls
									jQuery( "#media-popup-container #media-popup-fields #media-list .new" ).each(function(){
										jQuery( this ).on("click", function(){
											jQuery( "#story-featured-image" ).css( "background-image", "url("+ jQuery( this ).attr( "attachment_src" ) +")" );
											jQuery( "#story-featured-image" ).attr( "attachment-id", jQuery( this ).attr( "id" ) );
										});

										jQuery( this ).removeClass( "new" );
									});
								} else {
									jQuery( "#media-popup-container #media-popup-fields #media-list #load-more-controller" ).remove();
								}
							}
						);
					});
				}
			);
		});

		jQuery( "#add-media-controller" ).on("click", function(){
			build = "\
			<div id='media-popup-container' class='popup-container animated fadeIn'>\
				<div id='media-popup-fields' class='popup-inner-container'>\
					<button id='close-button' class='close-button fa fa-close'></button>\
					<div id='media-list' class='mt-2em mb-2em mh-auto text-align-center line-height-zero'>"+ loading +"</div>\
				</div>\
			</div>\
			";

			jQuery( "body" ).append( build );
			jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); } });
			jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); });

			generateAJAX({
					functionName : "get_user_media",
					arguments : {
						user_id: companyID,
						is_ajax: true
					}
				}, function( response ) {
					jQuery( "#media-popup-container #media-popup-fields #media-list #loader" ).remove();

					medias = JSON.parse( JSON.parse( response ) );
					for ( count = 0; count < medias.length; count++ ) {
						if ( medias[ count ].TYPE.split( "/" )[0] == "image" ) {
							view_ = "<div id='attachment-"+ medias[ count ].ID +"' class='inline-media animated fadeIn' attachment_src='"+ medias[ count ].URL +"' attachment_type='"+ medias[ count ].TYPE +"' style='background-image: url("+ medias[ count ].URL +");'><div>";
							jQuery( "#media-popup-container #media-popup-fields #media-list" ).append( view_ );
						}
					}

					// Set controls
					jQuery( "#media-popup-container #media-popup-fields #media-list .inline-media" ).each(function(){
						jQuery( this ).on("click", function(){
							tinymce.activeEditor.execCommand( 'mceInsertContent', false, jQuery( this ).attr( "attachment_src" ) );
						});
					});

					var mediaOffset = 20;

					// Load more view
					view_ = "<div id='load-more-controller' class='inline-media animated fadeIn'><span>More</span></div>";
					jQuery( "#media-popup-container #media-popup-fields #media-list" ).append( view_ );
					jQuery( "#media-popup-container #media-popup-fields #media-list #load-more-controller" ).on("click", function(){
						generateAJAX({
								functionName : "get_user_media",
								arguments : {
									user_id: companyID,
									is_ajax: true,
									offset: mediaOffset
								}
							}, function( response ) {
								response = JSON.parse( JSON.parse( response ) );

								if ( response != "You don't have any media." ) {
									mediaOffset += 20;
									for ( count = 0; count < response.length; count++ ) {
										if ( response[ count ].TYPE.split( "/" )[0] == "image" ) { view_ = "<div id='attachment-"+ response[ count ].ID +"' class='inline-media new animated fadeIn' attachment_src='"+ response[ count ].URL +"' attachment_type='"+ response[ count ].TYPE +"' style='background-image: url("+ response[ count ].URL +");'><div>"; }
										else if ( response[ count ].TYPE.split( "/" )[0] == "video" ) { view_ = "<div id='attachment-"+ response[ count ].ID +"' class='inline-media new animated fadeIn' attachment_src='"+ response[ count ].URL +"' attachment_type='"+ response[ count ].TYPE +"'><video autoplay='true' muted='true' loop='true'><source src='"+ response[ count ].URL +"' type='"+ response[ count ].TYPE +"'></video><div class='overlay'></div><div>"; }

										jQuery( view_ ).insertBefore( "#media-popup-container #media-popup-fields #media-list #load-more-controller" );
									}

									// Set controls
									jQuery( "#media-popup-container #media-popup-fields #media-list .new" ).each(function(){
										jQuery( this ).on("click", function(){
											tinymce.activeEditor.execCommand( 'mceInsertContent', false, jQuery( this ).attr( "attachment_src" ) );
										});

										jQuery( this ).removeClass( "new" );
									});
								} else {
									jQuery( "#media-popup-container #media-popup-fields #media-list #load-more-controller" ).remove();
								}
							}
						);
					});
				}
			);
		});

		jQuery( "#add-mention-controller" ).on( "click", function(){
			build = "\
			<div id='mention-popup-container' class='popup-container animated fadeIn'>\
				<div id='mention-popup-fields' class='popup-inner-container'>\
					<button id='close-button' class='close-button fa fa-close'></button>\
					<input type='text' id='search' class='mb-1em mt-2em mh-auto' placeholder='Search...' onkeydown='' onkeyup=''>\
					<div class='user-relations-body'>\
						<div id='employees-list' class='mb-1em mh-auto line-height-zero text-align-left user-list active'>"+ loading +"</div>\
						<div id='results-list' class='mb-1em mh-auto line-height-zero text-align-left user-list hidden'></div>\
					</div>\
				</div>\
			</div>\
			";

			jQuery( "body" ).append( build );
			jQuery( "#mention-popup-container" ).on("click", function( e ){ if( e.target == this ){ jQuery( "#mention-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#mention-popup-container" ).remove(); }, 750); } });
			jQuery( "#mention-popup-container #mention-popup-fields #close-button" ).on("click", function(){ jQuery( "#mention-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#mention-popup-container" ).remove(); }, 750); });

			searchRequestInterval = setTimeout(function(){}, 1000);
			jQuery( "#mention-popup-container #mention-popup-fields #search" ).on("keydown", function(){
				clearTimeout( searchRequestInterval );
			});
			jQuery( "#mention-popup-container #mention-popup-fields #search" ).on("keyup", function(){
				var searchInput = jQuery( "#mention-popup-container #mention-popup-fields #search" ).val().trim();

				if ( searchInput != "" ) {
					searchRequestInterval = setTimeout(function(){
						var firstName = "";
						var lastName = "";
						var name = "";

						if ( searchInput.indexOf( " " ) > -1 ) {
							firstName = searchInput.split( " " )[0];
							lastName = searchInput.split( " " )[1];
						} else {
							name = searchInput;
						}

						jQuery( "#mention-popup-container #mention-popup-fields #employees-list" ).removeClass( "active" ).addClass( "hidden" );
						jQuery( "#mention-popup-container #mention-popup-fields #results-list" ).removeClass( "hidden" ).addClass( "active" ).empty().append( loading );

						generateAJAX({
								functionName : "get_search_results",
								arguments : {
									first_name: firstName,
									last_name: lastName,
									universal_name: name,
									user_id: companyID,
									relations: [ "employees" ]
								}
							}, function( response ) {
								response = JSON.parse( response );
								jQuery( "#mention-popup-container #mention-popup-fields #results-list" ).empty();

								for ( search_result in response ) {
									user_ = response[ search_result ];
									names = user_.user_body.short_name == "" ? user_.user_body.first_name +" "+ user_.user_body.last_name : user_.user_body.short_name;
									build = "\
									<button id='user-"+ user_.user_id +"' class='relation-anchor' user_url='"+ user_.user_body.profile_url +"'>\
										<div class='relation-container'>\
											<div class='user-avatar' style='background-image: url("+ user_.user_body.avatar_url +");'></div>\
											<h1 class='user-names'>"+ names +"</h1>\
										</div>\
									</button>\
									";
									jQuery( "#mention-popup-container #mention-popup-fields #results-list" ).append( build );
									jQuery( "#mention-popup-container #mention-popup-fields #results-list #user-"+ user_.user_id ).on("click", function(){
										build = "\
										<a href='"+ jQuery( this ).attr( "user_url" ) +"' target='_blank' class='user-preview'>\
											"+ jQuery( this ).find( ".user-names" ).html().trim(); +"\
										</a>\
										";
										tinymce.activeEditor.execCommand( 'mceInsertContent', false, build );
									});
								}
							}
						);
					}, 1000);
				} else {
					jQuery( "#mention-popup-container #mention-popup-fields #employees-list" ).removeClass( "hidden" ).addClass( "active" );
					jQuery( "#mention-popup-container #mention-popup-fields #results-list" ).removeClass( "active" ).addClass( "hidden" ).empty();
				}
			});

			generateAJAX({
					functionName : "get_user_employees",
					arguments : companyID
				}, function( response ) {
					response = JSON.parse( response );

					for ( employee_key in response ) {
						employee = response[ employee_key ];
						user_names = employee.user_employee_body.user_shortname == "" ? employee.user_employee_body.user_first_name +" "+ employee.user_employee_body.user_last_name : employee.user_employee_body.user_shortname;

						build = "\
						<button id='employee-anchor-"+ employee.row_id +"' class='relation-anchor' employee-url='"+ employee.user_employee_body.user_url +"'>\
							<div class='relation-container'>\
								<div class='user-avatar' style='background-image: url("+ employee.user_employee_body.user_avatar_url +");'></div>\
								<h1 class='user-names'>"+ user_names +"</h1>\
							</div>\
						</button>\
						";
						jQuery( "#mention-popup-container #mention-popup-fields #employees-list #loader" ).remove();
						jQuery( "#mention-popup-container #mention-popup-fields #employees-list" ).append( build );
						jQuery( "#mention-popup-container #mention-popup-fields #employees-list #employee-anchor-"+ employee.row_id ).on("click", function(){
							build = "\
							<a href='"+ jQuery( this ).attr( "employee-url" ) +"' target='_blank' class='user-preview'>\
								"+ jQuery( this ).find( ".user-names" ).html().trim(); +"\
							</a>\
							";
							tinymce.activeEditor.execCommand( 'mceInsertContent', false, build );
						});
					}
				}
			);
		} );

		jQuery( "#drafts-controller" ).on("click", function(){
			build = "\
			<div id='drafts-popup-container' class='popup-container animated fadeIn'>\
				<div id='drafts-popup-fields' class='popup-inner-container'>\
					<button id='close-button' class='close-button fa fa-close'></button>\
					<div id='drafts-container' class='stories-list'>"+ loading +"</div>\
				</div>\
			</div>\
			";

			jQuery( "body" ).append( build );
			jQuery( "#drafts-popup-container" ).on("click", function( e ){ if( e.target == this ){ jQuery( "#drafts-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#drafts-popup-container" ).remove(); }, 750); } });
			jQuery( "#drafts-popup-container #drafts-popup-fields #close-button" ).on("click", function(){ jQuery( "#drafts-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#drafts-popup-container" ).remove(); }, 750); });

			generateAJAX({
				functionName : "get_user_stories",
				arguments : {
					post_status: "draft",
					company_id: companyID
				}
			}, function( response ) {
				jQuery( "#drafts-popup-container #drafts-popup-fields #loader" ).remove();

				response = JSON.parse( response );
				for ( draft_key in response ) {
					draft_ = response[ draft_key ];

					build = "\
					<button id='post-draft-"+ draft_.ID +"' class='post-draft animated fadeIn' post-id='"+ draft_.ID +"'>\
						<div class='post-draft-banner' style='background-image: url("+ draft_.banner.url +");'></div>\
						<h1 class='post-draft-title'>"+ draft_.title +"</h1>\
						<div class='remove-button fa fa-trash-o'></div>\
					</button>\
					";

					jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container" ).append( build );

					jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container #post-draft-"+ draft_.ID ).on("click", function( e ){
						if ( e.target == this ) {
							jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container" ).empty().append( loading );

							post_id = jQuery( this ).attr( "post-id" );

							generateAJAX({
								functionName : "get_user_story",
								arguments : {
									post_id: post_id,
									company_id: companyID
								}
							}, function( response ) {
								response = JSON.parse( response );

								jQuery( "#story-composer" ).attr( "post-id", response.ID );
								jQuery( "#story-composer #story-featured-image" ).attr( "attachment-id", response.banner.ID ).attr( "style", "background-image: url("+ response.banner.url +")" );
								jQuery( "#story-composer #story-header" ).html( response.title );
								tinyMCE.activeEditor.setContent('');
								tinymce.activeEditor.execCommand( 'mceInsertContent', false, response.content );

								jQuery( "#drafts-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#drafts-popup-container" ).remove(); }, 750);
							});
						}
					});

					jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container #post-draft-"+ draft_.ID +" .remove-button" ).on("click", function(){
						post_id = jQuery( this ).parent().attr( "post-id" );
						generateAJAX({
							functionName : "delete_user_story",
							arguments : {
								post_id: post_id,
								company_id: companyID
							}
						}, function( response ) {
							response = JSON.parse( response );
							jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container #post-draft-"+ response ).removeClass( "fadeIn" ).addClass( "fadeOut" );
							setTimeout( function(){ jQuery( "#drafts-popup-container #drafts-popup-fields #drafts-container #post-draft-"+ response ).remove(); }, 750 );
						});
					});
				}
			});
		});

		jQuery( "#publish-controller" ).on("click", function(){
			post_id = jQuery( "#story-composer" ).attr( "post-id" );

			generateAJAX({
				functionName : "publish_user_story",
				arguments : {
					post_id: post_id,
					company_id: companyID
				}
			}, function( response ) {
				response = JSON.parse( response );
				if ( response == true ) { window.location.reload( true ); }
				else { console.log( response ); }
			});
		});

		jQuery( "#close-controller" ).on( "click", function(){ classHolder.destroyComposer( "."+ random_editor_id ); } );
	}

	/*
	*	Function name: destroyComposer
	*	Function arguments: NONE
	*	Function purpose: This function destroys the story composer which was created by this.buildComposer method.
	*/
	this.destroyComposer = function( editorID ) {
		tinymce.remove( editorID );
		jQuery( "#story-composer" ).removeClass( "slideInUp" ).addClass( "slideOutDown" );
		setTimeout(function(){ jQuery( "#story-composer" ).remove(); }, 750);
	}

	/*
	*	Function name: autoSave
	*	Function arguments: NONE
	*	Function purpose:
	*	This function sends the latest drafts over the user story to the back-end after 2 seconds without beign edited.
	*/
	this.autoSave = function() {
		return setTimeout(function(){
			title = jQuery( "#story-header").html().trim();
			if ( canSave == true || ( canSave == false && title != "" && title !== undefined ) ) {
				canSave = false;
				bannerID = jQuery( "#story-featured-image" ).attr( "attachment-id" );
				bannerID = bannerID !== undefined ? bannerID.split( "-" )[1] : false;
				content = tinyMCE.activeEditor.getContent();
				postID = jQuery( "#story-composer" ).attr( "post-id" );

				console.log( content );

				if ( title != "" && title !== undefined ) {
					generateAJAX({
						functionName : "draft_user_post",
						arguments : {
							post_id: postID,
							post_title: title,
							post_content: content,
							post_attachment_id: bannerID,
							company_id: companyID
						}
					}, function( response ) {
						response = JSON.parse( response );
						if ( jQuery.isNumeric( response ) ) {
							jQuery( "#story-composer" ).attr( "post-id", response );
							canSave = true;
						}
						else { console.log( response ); }
					} );
				}
			} else {
				if ( title != "" && title !== undefined ) { canSave = true; }
			}
		}, 2000);
	}

	/*
	*	Function name: convertLinksToImageVideo
	*	Function arguments: content [ STRING ] (required)
	*	Function purpose:
	*	This function is used to dinamicaly convert URLs to live Images or videos from supported players.
	*	List of supported players: { YouTube, Vimeo }
	*/
	this.convertLinksToImageVideo = function( content ) {
		var urlRegex = /(https?:\/\/[^\s]+)/g;

	   urls_ = content.match( urlRegex );
	   if ( urls_ !== "undefined" && urls_ != null ) {
		   for ( count = 0; count < urls_.length; count++ ) {
		   		url_ = urls_[ count ];
		   		if ( url_.indexOf( "?marked" ) < 0 ) {
		   			var markup_ = "";

		   			if ( url_.indexOf( "youtube" ) >= 0 ) {
		   				videoID = url_.split( "v=" )[1].split( "&" )[0];
		   				markup_ = "<iframe class='content-video' src='https://www.youtube.com/embed/"+ videoID +"?marked' frameborder='0' allowfullscreen></iframe>";
		   				tinyMCE.activeEditor.setContent( tinyMCE.activeEditor.getContent().replace( url_, markup_ ) );
		   			}
		   			else if ( url_.indexOf( "vimeo" ) >= 0 ) {
		   				videoID = url_.split( "vimeo.com/" )[1];
		   				markup_ = "<iframe class='content-video' src='https://player.vimeo.com/video/"+ videoID +"?marked' frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>";
		   				tinyMCE.activeEditor.setContent( tinyMCE.activeEditor.getContent().replace( url_, markup_ ) );
		   			}
		   			else {
						switch ( url_.split( "." )[ url_.split( "." ).length - 1 ] ) {
							case "mp4":
									markup_ = "<video class='video-player' controls loop><source src='"+ url_ +"' type='video/"+ url_.split( "." )[ url_.split( "." ).length - 1 ] +"'></video>";
									tinyMCE.activeEditor.setContent( tinyMCE.activeEditor.getContent().replace( url_, markup_ ) );
								break;

							default:
								jQuery( "<img>", {
									src: url_,
									error: function() {},
									load: function() {
										markup_ = "<img src='"+ url_ +"?marked' class='content-image' />";
										tinyMCE.activeEditor.setContent( tinyMCE.activeEditor.getContent().replace( url_, markup_ ) );
									}
								});
						}
		   			}
		   		}
		   }
	   }

	   return content;
	}

	/*
	*	Function name: likeUnlikeStory
	*	Function arguments: storyID [ INT ] (required), userID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is used to send LIKE || UNLIKE to the $BROTHER_->like_unlike_story method via simplified AJAX request.
	*/
	this.likeUnlikeStory = function( storyID, userID = "", onSuccess ){
		generateAJAX({
				functionName : "like_unlike_story",
				arguments : {
					story_id: storyID,
					user_id: userID
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: deleteStory
	*	Function arguments: storyID [ INT ] (required), companyID [ INT ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is used to delete an user story, defined by the storyID argument.
	*/
	this.deleteStory = function( storyID, companyID, onSuccess ) {
		generateAJAX({
				functionName : "delete_user_story",
				arguments : {
					post_id: storyID,
					company_id: companyID
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: publishComment
	*	Function arguments: storyID [ INT ] (required), userID [ INT ] (optional), commentContent [ STRING ] (required), commentID [ INT ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is used to send user comment to the Brother.PHP framework.
	*/
	this.publishComment = function( storyID, userID = "", commentContent, commentID = "", onSuccess ) {
		generateAJAX({
				functionName : "publish_story_comment",
				arguments : {
					story_id: storyID,
					user_id: userID,
					comment_content: commentContent,
					comment_id: commentID !== undefined ? commentID : ""
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: deleteComment
	*	Function arguments: commentID [ INT ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is sending a front-end DELETE_COMMENT request to the Brother.PHP framework.
	*/
	this.deleteComment = function( commentID, onSuccess ) {
		generateAJAX({
				functionName : "delete_story_comment",
				arguments : commentID
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: editComment
	*	Function arguments: commentID [ INT ] (required), commentContainer [ STRING_SELECT ] (required), editorContainer [ STRING_SELECTOR ] (required)
	*	Function purpose: This function is used to get the comment text from a specified commentContainer and put it to the value of the editorContainer input.
	*/
	this.editComment = function( commentID, commentContainer, editorContainer ) {
		jQuery( editorContainer ).val( jQuery( commentContainer ).html().trim() ).attr( "comment-id", commentID ).focus();
	}

	/*
	*	Function name: getComments
	*	Function arguments: storyID [ INT ] (required), userID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose:
	*	This function is used to send front-end request to pull story comments.
	*/
	this.getComments = function( storyID, userID = "", onSuccess ) {
		generateAJAX({
				functionName : "get_story_comments",
				arguments : {
					story_id: storyID,
					user_id: userID
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: getStories
	*	Function arguments: userID [ INT ] (optional), offset [ INT ] (optional), companyID [ INT ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is used to get more stories in the specified Company story board.
	*/
	this.getStories = function( userID = "", offset = "", companyID, onSuccess ) {
		generateAJAX({
				functionName : "get_company_stories",
				arguments : {
					company_id: companyID,
					offset: offset,
					stories: 5,
					is_ajax: true
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}

	/*
	*	Function name: getUserStoriesBoard
	*	Function arguments: userID [ INT ] (optional), offset [ INT ] (required), compositions [ BOOL ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
	*	Function purpose: This function is used to pull stories in the Employee personal || visited story board. Stories can be compositions of the user or just stories, which the user have viewed / liked.
	*/
	this.getUserStoriesBoard = function( userID = "", offset, compositions, onSuccess ) {
		generateAJAX({
				functionName : "get_user_board",
				arguments : {
					user_id: userID,
					user_compositions: compositions,
					offset: offset,
					is_ajax: true
				}
			}, function ( response ) { onSuccess( JSON.parse( response ) ); }
		);
	}
}

/*
*	Class name: PublicLists
*	Class arguments: NONE
*	Class purpose: This class is used to control the public lists (hubbers, companies) of the HUB project.
*/
var PublicLists = function() {
	var classHolder = this;

	/*
	*	Function name: getMoreHubbers
	*	Function arguments: usersOffset [ INT ] (required), onSuccess [ FUNCTION ] (required)
	*	Function purpose: This function is used to retrieve more users from the Global DB of the HUB project.
	*/
	this.getMoreHubbers = function( usersOffset, onSuccess ) {
		generateAJAX({
				functionName : "get_hubbers",
				arguments : {
					offset: usersOffset,
					is_ajax: true
				}
			}, function ( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); }
		);
	}
}

/*
*	Class name: Phubber
*	Class arguments: NONE
*	Class purpose: This class is used to control the user premium part of the HUB project.
*/
var Phubber = function() {
	var classHolder = this;

	/*
	*	Function name: updateUserPremium
	*	Function arguments: userID [ INT ] (optional), onSuccess [ FUNCTION ]
	*	Function purpose: This function is used update the Premium period of the specified user.
	*/
	this.updateUserPremium = function( userID = "", onSuccess ) {
		generateAJAX({
				functionName : "update_user_premium",
				arguments : userID
			}, function ( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); }
		);
	}
}

var User = function() {
	var classHolder = this;

	this.getUserBadges = function( userID = "", onSuccess ) {
		generateAJAX({
				functionName : "get_user_badges",
				arguments : userID
			}, function ( response ) { onSuccess( JSON.parse( JSON.parse( response ) ) ); }
		);
	}
}

/*
*	Function name: generateAJAX
*	Function arguments: args [ JSON object ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
*	Function purpose:
*	This function creates a custom AJAX call, which is send to the server. It allows the developer to choose what to happen with the response via custom functions, provided by the onSuccess attribute.
*/
function generateAJAX( args, onSuccess ) {
	return jQuery.ajax({
		url : ajax_url,
		type : 'post',
		data : {
			action : "generate_ajax_call",
			data : JSON.stringify( args )
		},
		success : function( response ) { onSuccess( response ); }
	});
}

/*
*	Function name: isMobile
*	Function arguments: none
*	Function purpose: This function is used to check if the user is viewing the HUB from a Mobile device or no.
*/
function isMobile() {
	if( navigator.userAgent.match(/Android/i)
	|| navigator.userAgent.match(/webOS/i)
	|| navigator.userAgent.match(/iPhone/i)
	|| navigator.userAgent.match(/iPad/i)
	|| navigator.userAgent.match(/iPod/i)
	|| navigator.userAgent.match(/BlackBerry/i)
	|| navigator.userAgent.match(/Windows Phone/i)
 	){
		return true;
  	} else {
    	return false;
  	}
}
