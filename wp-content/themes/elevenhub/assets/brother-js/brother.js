var loading = "<div id='loader' class='animated rubberBand infinite'></div>";

/*
*	Class name: UserMedia
*	Class arguments: userID [ INT ] (optional)
*	Class purpose: This class is used to control all the media events and methods in the HUB project.
*/
var UserMedia = function( userID = "" ) {

	/*
	*	Function name: BuildMediaView
	*	Function arguments: loadProfilePictures [ BOOLEAN ], markupToBuild [ STRING ]
	*	Function purpose:
	*	This function generates popup view for the current user.
	*	If the loadProfilePictures variable is true it will load the media view for profile pictures.
	* 	Also if the markupToBuild variable is not empty its content will be created inside the popup.
	*/
	this.BuildMediaView = function( loadProfilePictures = false, markupToBuild = "" ) {
		view_ = "\
		<div id='media-popup-container' class='popup-container animated fadeIn'>\
			<div id='media-popup-fields' class='popup-inner-container'>\
				<button id='close-button' class='close-button fa fa-close'></button>\
				"+ markupToBuild.toString().replace( /(?:\r\n|\r|\n)/g, "" ) +"\
			</div>\
		</div>\
		";

		jQuery( "body" ).append( view_ );
		jQuery( "#media-popup-container" ).on("click", function( e ){ if( e.target == this ){ controller = new UserMedia(); controller.destroyMediaPopup(); } });
		jQuery( "#media-popup-container #media-popup-fields #close-button" ).on("click", function(){ controller = new UserMedia(); controller.destroyMediaPopup(); });

		//Load images if needed
		if ( loadProfilePictures == true ) {
			build = "\
				<div id='profile-images-holder'>\
					<form action='"+ admin_post_url +"' method='POST' enctype='multipart/form-data' id='profile-media-uploader'>\
						<div id='avatar' class='avatar'></div>\
						<input type='file' id='avatar-picker' class='file-picker' name='avatar-picker'>\
						<div id='banner' class='banner'></div>\
						<input type='file' id='banner-picker' class='file-picker' name='banner-picker'>\
						<button id='save-user-pictures-button' class='green-bold-button'>Save</button>\
						<input type='hidden' name='action' value='upload_profile_media'>\
					</form>\
				</div>\
			";

			jQuery( "#media-popup-fields" ).append( build );

			jQuery( "#media-popup-container #media-popup-fields #save-user-pictures-button" ).on("click", function(){ jQuery( "#profile-images-holder" ).append( loading ); jQuery( "#profile-media-uploader" ).submit(); });

			this.getUserAvatarURL( "", function( response ){ jQuery( "#media-popup-fields #profile-images-holder #avatar" ).attr( "style", "background-image: url("+ response +")" ) } );
			this.getUserBannerURL( "", function( response ){ jQuery( "#media-popup-fields #profile-images-holder #banner" ).attr( "style", "background-image: url("+ response +")" ) } );
		}
	}

	/*
	*	Function name: destroyMediaPopup
	*	Function arguments: NONE
	*	Function purpose:
	*	This function will destroy the popup view generated by BuildMediaView function.
	*/
	this.destroyMediaPopup = function() { jQuery( "#media-popup-container" ).removeClass( "fadeIn" ).addClass( "fadeOut" ); setTimeout(function(){ jQuery( "#media-popup-container" ).remove(); }, 750); }

	/*
	*	Function name: getUserAvatarURL
	*	Function arguments: userID [ INT ] (optional), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to retrieve and handle the user avatar url via custom functions provided by the onSuccess argument.
	*/
	this.getUserAvatarURL = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_avatar_url", arguments : userID }, function( response ){ onSuccess( response ); } );
	}

	/*
	*	Function name: getUserBannerURL
	*	Function arguments: userID [ INT ] (option), onSuccess [ FUNCTION ] (required) tells the method what to do after the response.
	*	Function purpose: This function is used to retrieve and handle the user banner url via custom functions provided by the onSuccess argument.
	*/
	this.getUserBannerURL = function( userID = "", onSuccess ) {
		generateAJAX( { functionName : "get_user_banner_url", arguments : userID }, function( response ){ onSuccess( response ); } );
	}

}

/*
*	Class name: UserRelations
*	Class arguments: vUserID [ INT ] (required) (the user of the visited / wanted user), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
*	Class purpose: This class is used to control & handle all the relations methods between the different users in the HUB.
*/
var UserRelations = function( vUserID, userID = "" ) {

	/*
	*	Function name: followOrUnfollowRelation
	*	Function arguments: vUserID [ INT ] (required) (the VisitedUserID), recalculateFollower [ BOOL ] (optional) (tells the function if you need an array of the followers to be returned), onSuccess [ FUNCTION ] (required) tells the method what to do after the response, userID [ INT ] (optional) (the user ID of the currently logged in user).
	*/
	this.followOrUnfollowRelation = function( vUserID, recalculateFollowers = false, onSuccess, userID = "" ) {
		generateAJAX( { functionName : "follow_or_unfollow_relation", arguments : { v_user_id: vUserID, user_id: userID, recalculate_followers: recalculateFollowers } }, function ( response ) { onSuccess( response ); } );
	}

}


/*
*	Function name: generateAJAX
*	Function arguments: args [ JSON object ] (required), onSuccess [ FUNCTION ] (required) tells the function what to do after the response.
*	Function purpose:
*	This function creates a custom AJAX call, which is send to the server. It allows the developer to choose what to happen with the response via custom functions, provided by the onSuccess attribute.
*/
function generateAJAX( args, onSuccess ) {
	return jQuery.ajax({
		url : ajax_url,
		type : 'post',
		data : {
			action : "generate_ajax_call",
			data : JSON.stringify( args )
		},
		success : function( response ) { onSuccess( response ); }
	});
}
